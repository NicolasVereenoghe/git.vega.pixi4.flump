// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	_setDefaultValues: function() {
		this._animationFrameId = null;
		this.pixelRatio = 1;
		this.autoResize = true;
		this.transparent = false;
		this.antialias = false;
		this.forceFXAA = false;
		this.roundPixels = false;
		this.clearBeforeRender = true;
		this.preserveDrawingBuffer = false;
		this.backgroundColor = 16777215;
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.position = "static";
	}
	,start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width;
		renderingOptions.height = this.height;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.noWebGL = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,pauseRendering: function() {
		this.app.stop();
	}
	,resumeRendering: function() {
		this.app.start();
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,addStats: function() {
		if(window.Perf != null) {
			new Perf().addInfo(["UNKNOWN","WEBGL","CANVAS"][this.app.renderer.type] + " - " + this.pixelRatio);
		}
	}
	,__class__: pixi_plugins_app_Application
};
var Main = function() {
	pixi_plugins_app_Application.call(this);
	this.start();
	this.loader = new PIXI.loaders.Loader();
	this.loader.add("assets/assetsTest/library.json?v=7");
	this.loader.after(flump_pixi_Parser.parse(1,"?v=7"));
	this.loader.load($bind(this,this.onLoadComplete));
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
Main.__super__ = pixi_plugins_app_Application;
Main.prototype = $extend(pixi_plugins_app_Application.prototype,{
	onLoadComplete: function() {
		this.loader.removeAllListeners();
		this.stage.addChild(new flump_pixi_Movie("test"));
	}
	,doUpdate: function(pT) {
	}
	,__class__: Main
});
Math.__name__ = true;
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(($_=window,$bind($_,$_.requestAnimationFrame)) != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(($_=window,$bind($_,$_.cancelAnimationFrame)) != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
Perf.__name__ = true;
Perf.prototype = {
	_init: function() {
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_now: function() {
		if(this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null) {
			return this._perfObj.now();
		} else {
			return new Date().getTime();
		}
	}
	,_tick: function(val) {
		var time = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		var _g = this._pos;
		switch(_g) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck ? 48 : 32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,clearInfo: function() {
		if(this.info != null) {
			window.document.body.removeChild(this.info);
			this.info = null;
		}
	}
	,destroy: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
		this._perfObj = null;
		this._memoryObj = null;
		if(this.fps != null) {
			window.document.body.removeChild(this.fps);
			this.fps = null;
		}
		if(this.ms != null) {
			window.document.body.removeChild(this.ms);
			this.ms = null;
		}
		if(this.memory != null) {
			window.document.body.removeChild(this.memory);
			this.memory = null;
		}
		this.clearInfo();
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_cancelRAF: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
	}
	,__class__: Perf
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var _$UInt_UInt_$Impl_$ = {};
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) {
		return 4294967296.0 + $int;
	} else {
		return $int + 0.0;
	}
};
var flump_json__$FlumpJSON_FlumpPointSpec_$Impl_$ = {};
flump_json__$FlumpJSON_FlumpPointSpec_$Impl_$.__name__ = true;
flump_json__$FlumpJSON_FlumpPointSpec_$Impl_$.get_x = function(this1) {
	return this1[0];
};
flump_json__$FlumpJSON_FlumpPointSpec_$Impl_$.get_y = function(this1) {
	return this1[1];
};
var flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$ = {};
flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$.__name__ = true;
flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$.get_x = function(this1) {
	return this1[0];
};
flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$.get_y = function(this1) {
	return this1[1];
};
flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$.get_width = function(this1) {
	return this1[2];
};
flump_json__$FlumpJSON_FlumpRectSpec_$Impl_$.get_height = function(this1) {
	return this1[3];
};
var flump_library_FlumpLibrary = function(pDatas,pResolution,pId) {
	this.resolution = pResolution;
	this.symbols = new haxe_ds_StringMap();
	this.datas = pDatas;
	this.id = pId;
	this.curTGSpec = this.getSmartestTGSpec();
	this.addSprites();
	this.addMovies();
	var key = this.id;
	var _this = flump_library_FlumpLibrary.libraries;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,this);
	} else {
		_this.h[key] = this;
	}
};
flump_library_FlumpLibrary.__name__ = true;
flump_library_FlumpLibrary.findLibraySymbolFromId = function(pSymbolId) {
	var _this = flump_library_FlumpLibrary.libraries;
	var iLib = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(iLib.hasNext()) {
		var iLib1 = iLib.next();
		var _this1 = iLib1.symbols;
		if(__map_reserved[pSymbolId] != null ? _this1.existsReserved(pSymbolId) : _this1.h.hasOwnProperty(pSymbolId)) {
			var _this2 = iLib1.symbols;
			if(__map_reserved[pSymbolId] != null) {
				return _this2.getReserved(pSymbolId);
			} else {
				return _this2.h[pSymbolId];
			}
		}
	}
	return null;
};
flump_library_FlumpLibrary.exists = function(pSymbolId,pLibId) {
	if(pLibId == null) {
		var _this = flump_library_FlumpLibrary.libraries;
		var iLib = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(iLib.hasNext()) {
			var iLib1 = iLib.next();
			var _this1 = iLib1.symbols;
			if(__map_reserved[pSymbolId] != null ? _this1.existsReserved(pSymbolId) : _this1.h.hasOwnProperty(pSymbolId)) {
				return true;
			}
		}
		return false;
	} else {
		var _this2 = flump_library_FlumpLibrary.libraries;
		if(__map_reserved[pLibId] != null ? _this2.existsReserved(pLibId) : _this2.h.hasOwnProperty(pLibId)) {
			var _this3 = flump_library_FlumpLibrary.libraries;
			var _this4 = (__map_reserved[pLibId] != null ? _this3.getReserved(pLibId) : _this3.h[pLibId]).symbols;
			if(__map_reserved[pSymbolId] != null) {
				return _this4.existsReserved(pSymbolId);
			} else {
				return _this4.h.hasOwnProperty(pSymbolId);
			}
		} else {
			return false;
		}
	}
};
flump_library_FlumpLibrary.createSymbol = function(pSymbolId,pLibId,pOnLayer) {
	var lSymbol;
	if(pLibId == null) {
		lSymbol = flump_library_FlumpLibrary.findLibraySymbolFromId(pSymbolId);
	} else {
		var _this = flump_library_FlumpLibrary.libraries;
		var _this1 = (__map_reserved[pLibId] != null ? _this.getReserved(pLibId) : _this.h[pLibId]).symbols;
		if(__map_reserved[pSymbolId] != null) {
			lSymbol = _this1.getReserved(pSymbolId);
		} else {
			lSymbol = _this1.h[pSymbolId];
		}
	}
	if(js_Boot.__instanceof(lSymbol,flump_library_SpriteSymbol)) {
		return new flump_pixi_Sprite(pSymbolId,lSymbol.library.id);
	} else {
		return new flump_pixi_Movie(pSymbolId,lSymbol.library.id,pOnLayer);
	}
};
flump_library_FlumpLibrary.prototype = {
	destroy: function() {
		flump_library_FlumpLibrary.libraries.remove(this.id);
		var _this = this.symbols;
		var iSym = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(iSym.hasNext()) {
			var iSym1 = iSym.next();
			iSym1.destroy();
		}
		this.symbols = null;
		this.datas = null;
		this.curTGSpec = null;
	}
	,getAtlasAt: function(pIndex) {
		return this.curTGSpec.atlases[pIndex];
	}
	,getNbAtlases: function() {
		return this.curTGSpec.atlases.length;
	}
	,getAtlasWithFileName: function(pName) {
		var _g = 0;
		var _g1 = this.curTGSpec.atlases;
		while(_g < _g1.length) {
			var iASpec = _g1[_g];
			++_g;
			if(iASpec.file == pName) {
				return iASpec;
			}
		}
		return null;
	}
	,getSmartestTGSpec: function() {
		var lTGSpecs = this.datas.textureGroups;
		var _g = 0;
		while(_g < lTGSpecs.length) {
			var iTG = lTGSpecs[_g];
			++_g;
			var b = this.resolution;
			if(_$UInt_UInt_$Impl_$.toFloat(iTG.scaleFactor) >= b) {
				return iTG;
			}
		}
		return lTGSpecs[lTGSpecs.length - 1];
	}
	,addSprites: function() {
		var _g = 0;
		var _g1 = this.curTGSpec.atlases;
		while(_g < _g1.length) {
			var iASpec = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = iASpec.textures;
			while(_g2 < _g3.length) {
				var iTSpec = _g3[_g2];
				++_g2;
				var this1 = this.symbols;
				var key = iTSpec.symbol;
				var value = new flump_library_SpriteSymbol(this,iTSpec);
				var _this = this1;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,value);
				} else {
					_this.h[key] = value;
				}
			}
		}
	}
	,addMovies: function() {
		var _g = 0;
		var _g1 = this.datas.movies;
		while(_g < _g1.length) {
			var iMSpec = _g1[_g];
			++_g;
			var this1 = this.symbols;
			var key = iMSpec.id;
			var value = new flump_library_MovieSymbol(this,iMSpec);
			var _this = this1;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
	}
	,get_framerate: function() {
		return this.datas.frameRate;
	}
	,get_frameTime: function() {
		var b = this.get_framerate();
		return _$UInt_UInt_$Impl_$.toFloat(1000) / _$UInt_UInt_$Impl_$.toFloat(b);
	}
	,get_md5: function() {
		return this.datas.md5;
	}
	,__class__: flump_library_FlumpLibrary
};
var flump_library_Keyframe = function(pSpec,pLayer,pKFrameIndex) {
	this.spec = pSpec;
	this.layer = pLayer;
	this.kFrameIndex = pKFrameIndex;
};
flump_library_Keyframe.__name__ = true;
flump_library_Keyframe.prototype = {
	get_numFrames: function() {
		return this.spec.duration;
	}
	,get_index: function() {
		return this.spec.index;
	}
	,get_isEmpty: function() {
		return this.spec.ref == null;
	}
	,get_symbolId: function() {
		return this.spec.ref;
	}
	,get_pivot: function() {
		if(this.spec.pivot == null) {
			return flump_library_Keyframe.ZERO;
		} else {
			return this.spec.pivot;
		}
	}
	,get_location: function() {
		if(this.spec.loc == null) {
			return flump_library_Keyframe.ZERO;
		} else {
			return this.spec.loc;
		}
	}
	,get_tweened: function() {
		return this.spec.tweened != false;
	}
	,get_scale: function() {
		if(this.spec.scale == null) {
			return flump_library_Keyframe.UNITY;
		} else {
			return this.spec.scale;
		}
	}
	,get_skew: function() {
		if(this.spec.skew == null) {
			return flump_library_Keyframe.ZERO;
		} else {
			return this.spec.skew;
		}
	}
	,get_alpha: function() {
		if(this.spec.alpha == null) {
			return 1;
		} else {
			return this.spec.alpha;
		}
	}
	,get_ease: function() {
		if(this.spec.ease == null) {
			return 0;
		} else {
			return this.spec.ease;
		}
	}
	,__class__: flump_library_Keyframe
};
var flump_library_Layer = function(pMovieSymbol,pLayerDesc) {
	this.movie = pMovieSymbol;
	this.layerSpec = pLayerDesc;
	this.parseKeyframes();
};
flump_library_Layer.__name__ = true;
flump_library_Layer.prototype = {
	destroy: function() {
		this.movie = null;
		this.layerSpec = null;
	}
	,getKeyframeAt: function(pIndex,pFromKFrame) {
		var lFrI;
		var lPrev;
		if(_$UInt_UInt_$Impl_$.gte(pIndex,this.totalFrames)) {
			return new flump_library_Keyframe({ duration : this.movie.totalFrames - this.totalFrames, index : this.totalFrames},this,this.getNbKeyframes());
		}
		if(pFromKFrame == null) {
			pFromKFrame = this.getKeyframeAtKframeIndex(0);
		}
		if(pIndex == pFromKFrame.get_index()) {
			return pFromKFrame;
		} else if(_$UInt_UInt_$Impl_$.gt(pFromKFrame.get_index(),pIndex)) {
			while(true) {
				pFromKFrame = this.getKeyframeAtKframeIndex(pFromKFrame.kFrameIndex - 1);
				if(!_$UInt_UInt_$Impl_$.gt(pFromKFrame.get_index(),pIndex)) {
					break;
				}
			}
		} else {
			while(_$UInt_UInt_$Impl_$.gte(pIndex,pFromKFrame.get_index() + pFromKFrame.get_numFrames())) pFromKFrame = this.getKeyframeAtKframeIndex(pFromKFrame.kFrameIndex + 1);
		}
		return pFromKFrame;
	}
	,getKeyframeAtKframeIndex: function(pKFrameIndex) {
		return new flump_library_Keyframe(this.layerSpec.keyframes[pKFrameIndex],this,pKFrameIndex);
	}
	,getNbKeyframes: function() {
		return this.layerSpec.keyframes.length;
	}
	,parseKeyframes: function() {
		this.totalFrames = 0;
		var _g = 0;
		var _g1 = this.layerSpec.keyframes;
		while(_g < _g1.length) {
			var iKSpec = _g1[_g];
			++_g;
			this.totalFrames = this.totalFrames + iKSpec.duration;
		}
	}
	,get_name: function() {
		return this.layerSpec.name;
	}
	,__class__: flump_library_Layer
};
var flump_library_Symbol = function(pLib) {
	this.library = pLib;
};
flump_library_Symbol.__name__ = true;
flump_library_Symbol.prototype = {
	destroy: function() {
		this.library = null;
	}
	,get_name: function() {
		return null;
	}
	,__class__: flump_library_Symbol
};
var flump_library_MovieSymbol = function(pLib,pMovieSpec) {
	flump_library_Symbol.call(this,pLib);
	this.movieSpec = pMovieSpec;
	this.buildLayerMap();
};
flump_library_MovieSymbol.__name__ = true;
flump_library_MovieSymbol.__super__ = flump_library_Symbol;
flump_library_MovieSymbol.prototype = $extend(flump_library_Symbol.prototype,{
	destroy: function() {
		var _this = this.layers;
		var iLayer = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(iLayer.hasNext()) {
			var iLayer1 = iLayer.next();
			iLayer1.destroy();
		}
		this.layers = null;
		this.movieSpec = null;
		flump_library_Symbol.prototype.destroy.call(this);
	}
	,getLayer: function(pId) {
		var _this = this.layers;
		if(__map_reserved[pId] != null ? _this.existsReserved(pId) : _this.h.hasOwnProperty(pId)) {
			var _this1 = this.layers;
			if(__map_reserved[pId] != null) {
				return _this1.getReserved(pId);
			} else {
				return _this1.h[pId];
			}
		} else {
			return null;
		}
	}
	,getLayerAt: function(pIndex) {
		return this.getLayer(this.movieSpec.layers[pIndex].name);
	}
	,getNbLayers: function() {
		return this.movieSpec.layers.length;
	}
	,buildLayerMap: function() {
		var lLayer;
		this.totalFrames = 0;
		this.layers = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.movieSpec.layers;
		while(_g < _g1.length) {
			var iLSpec = _g1[_g];
			++_g;
			lLayer = new flump_library_Layer(this,iLSpec);
			var this1 = this.layers;
			var key = lLayer.get_name();
			var _this = this1;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,lLayer);
			} else {
				_this.h[key] = lLayer;
			}
			if(_$UInt_UInt_$Impl_$.gt(lLayer.totalFrames,this.totalFrames)) {
				this.totalFrames = lLayer.totalFrames;
			}
		}
	}
	,get_name: function() {
		return this.movieSpec.id;
	}
	,__class__: flump_library_MovieSymbol
});
var flump_library_SpriteSymbol = function(pLib,pTextureSpec) {
	flump_library_Symbol.call(this,pLib);
	this.textureSpec = pTextureSpec;
};
flump_library_SpriteSymbol.__name__ = true;
flump_library_SpriteSymbol.__super__ = flump_library_Symbol;
flump_library_SpriteSymbol.prototype = $extend(flump_library_Symbol.prototype,{
	destroy: function() {
		if(this.texture != null) {
			this.texture.destroy(true);
			this.texture = null;
		}
		this.textureSpec = null;
		flump_library_Symbol.prototype.destroy.call(this);
	}
	,get_name: function() {
		return this.textureSpec.symbol;
	}
	,get_origin: function() {
		return this.textureSpec.origin;
	}
	,__class__: flump_library_SpriteSymbol
});
var flump_pixi_ISymbol = function() { };
flump_pixi_ISymbol.__name__ = true;
flump_pixi_ISymbol.prototype = {
	__class__: flump_pixi_ISymbol
};
var flump_pixi_Movie = function(pSymbolId,pLibId,pOnLayer) {
	PIXI.Container.call(this);
	if(pLibId != null) {
		var _this = flump_library_FlumpLibrary.libraries;
		var _this1 = (__map_reserved[pLibId] != null ? _this.getReserved(pLibId) : _this.h[pLibId]).symbols;
		this.symbol = __map_reserved[pSymbolId] != null ? _this1.getReserved(pSymbolId) : _this1.h[pSymbolId];
	} else {
		this.symbol = flump_library_FlumpLibrary.findLibraySymbolFromId(pSymbolId);
	}
	if(this.symbol == null) {
		throw new js__$Boot_HaxeError("Flump movie does not exist: " + pSymbolId + " : " + pLibId);
	}
	if(!js_Boot.__instanceof(this.symbol,flump_library_MovieSymbol)) {
		throw new js__$Boot_HaxeError("Wrong symbol type for Flump movie : " + pSymbolId + " : " + pLibId);
	}
	this.set_loop(true);
	if(pOnLayer == null) {
		this._currentFrame = 0;
		this.currentRate = 0;
	} else {
		var a = pOnLayer.movie.get_currentFrame() - pOnLayer.curKFr.get_index();
		var b = this.get_totalFrames();
		this._currentFrame = _$UInt_UInt_$Impl_$.toFloat(a) % _$UInt_UInt_$Impl_$.toFloat(b) | 0;
		if(_$UInt_UInt_$Impl_$.gt(this.get_totalFrames(),1)) {
			this.currentRate = pOnLayer.movie.currentRate;
		} else {
			this.currentRate = 0;
		}
	}
	this.initLayers();
	this.render();
};
flump_pixi_Movie.__name__ = true;
flump_pixi_Movie.__interfaces__ = [flump_pixi_ISymbol];
flump_pixi_Movie.__super__ = PIXI.Container;
flump_pixi_Movie.prototype = $extend(PIXI.Container.prototype,{
	destroy: function(options) {
		this.freeLayers();
		this.symbol = null;
		PIXI.Container.prototype.destroy.call(this,options);
	}
	,initLayers: function() {
		var lNb = (js_Boot.__cast(this.symbol , flump_library_MovieSymbol)).getNbLayers();
		var lI = 0;
		var lCont;
		var lLayer;
		this.layersDatas = new haxe_ds_StringMap();
		while(lI < lNb) {
			lCont = this.addChild(new PIXI.Container());
			lLayer = (js_Boot.__cast(this.symbol , flump_library_MovieSymbol)).getLayerAt(lI);
			lCont.name = lLayer.get_name();
			var this1 = this.layersDatas;
			var key = lLayer.get_name();
			var value = new flump_pixi_LayerDatas(this,lLayer,lCont);
			var _this = this1;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
			++lI;
		}
	}
	,freeLayers: function() {
		var _this = this.layersDatas;
		var iData = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(iData.hasNext()) {
			var iData1 = iData.next();
			iData1.destroy();
		}
	}
	,render: function() {
		var lNb = (js_Boot.__cast(this.symbol , flump_library_MovieSymbol)).getNbLayers();
		var lI = 0;
		var lDatas;
		while(lI < lNb) {
			var key = (js_Boot.__cast(this.symbol , flump_library_MovieSymbol)).movieSpec.layers[lI].name;
			var _this = this.layersDatas;
			if(__map_reserved[key] != null) {
				lDatas = _this.getReserved(key);
			} else {
				lDatas = _this.h[key];
			}
			lDatas.render();
			++lI;
		}
	}
	,get_totalFrames: function() {
		return (js_Boot.__cast(this.symbol , flump_library_MovieSymbol)).totalFrames;
	}
	,get_currentFrame: function() {
		return this._currentFrame;
	}
	,set_loop: function(pIsLoop) {
		return this.loop = pIsLoop;
	}
	,set_currentFrame: function(pFr) {
		return this._currentFrame = pFr;
	}
	,__class__: flump_pixi_Movie
});
var flump_pixi_LayerDatas = function(pMovie,pLayer,pCont) {
	this.curKFr = null;
	this.content = null;
	this.movie = pMovie;
	this.layer = pLayer;
	this.cont = pCont;
};
flump_pixi_LayerDatas.__name__ = true;
flump_pixi_LayerDatas.prototype = {
	destroy: function() {
		this.freeContent();
		this.cont.parent.removeChild(this.cont).destroy();
		this.cont = null;
		this.movie = null;
		this.layer = null;
		this.curKFr = null;
	}
	,freeContent: function() {
		if(this.content != null) {
			this.cont.removeChild(this.content).destroy();
			this.content = null;
		}
	}
	,render: function() {
		var lKeyframe = this.layer.getKeyframeAt(this.movie.get_currentFrame(),this.curKFr);
		if(lKeyframe.get_isEmpty()) {
			this.curKFr = lKeyframe;
			this.freeContent();
		} else if(this.curKFr == null || this.curKFr.get_isEmpty()) {
			this.curKFr = lKeyframe;
			this.ceateContent(lKeyframe);
		} else if(this.curKFr.get_symbolId() == lKeyframe.get_symbolId()) {
			this.curKFr = lKeyframe;
			this.updateContent(lKeyframe);
		} else {
			this.curKFr = lKeyframe;
			this.freeContent();
			this.ceateContent(lKeyframe);
		}
	}
	,ceateContent: function(pKeyframe) {
		this.content = this.cont.addChild(flump_library_FlumpLibrary.createSymbol(pKeyframe.get_symbolId(),this.movie.symbol.library.id,this));
		this.updateContent(pKeyframe);
	}
	,updateContent: function(pKeyframe) {
	}
	,__class__: flump_pixi_LayerDatas
};
var flump_pixi_MasterFramer = function() { };
flump_pixi_MasterFramer.__name__ = true;
var flump_pixi_Parser = function(pResolution,pAddUrl) {
	if(pResolution == null) {
		pResolution = 1;
	}
	this.RELOAD_DELAY = 3000;
	this.resolution = pResolution;
	this.addUrl = pAddUrl;
};
flump_pixi_Parser.__name__ = true;
flump_pixi_Parser.parse = function(pResolution,pAddUrl) {
	if(pResolution == null) {
		pResolution = 1;
	}
	return ($_=new flump_pixi_Parser(pResolution,pAddUrl),$bind($_,$_.afterJSonLoadAtlas));
};
flump_pixi_Parser.prototype = {
	afterJSonLoadAtlas: function(pResource,pNext) {
		var lData = pResource.data;
		this.jsonResource = pResource;
		this.afterJSonCallback = pNext;
		if(pResource.error != null || lData == null || !pResource.isJson || !Object.prototype.hasOwnProperty.call(lData,"md5") || !Object.prototype.hasOwnProperty.call(lData,"movies") || !Object.prototype.hasOwnProperty.call(lData,"textureGroups") || !Object.prototype.hasOwnProperty.call(lData,"frameRate")) {
			this.onError();
			return;
		}
		this.lib = new flump_library_FlumpLibrary(lData,this.resolution,pResource.url.split("?")[0]);
		this.textures = new haxe_ds_StringMap();
		this.atlasLoader = new PIXI.loaders.Loader();
		this.atlasLoader.on("error",$bind(this,this.onAtlasError));
		this.atlasLoader.on("complete",$bind(this,this.onAtlasLoadComplete));
		this.buildAtlasLoadQ();
		this.doAtlasLoad();
	}
	,buildAtlasLoadQ: function(pForceAntiCache) {
		if(pForceAntiCache == null) {
			pForceAntiCache = false;
		}
		var _this_r = new RegExp("/(.[^/]*)$","i".split("u").join(""));
		var lBase = this.jsonResource.url.replace(_this_r,"");
		var lI = 0;
		var lSpec;
		var lFile;
		while(lI < this.lib.getNbAtlases()) {
			lSpec = this.lib.getAtlasAt(lI);
			lFile = lBase + "/" + lSpec.file;
			if(pForceAntiCache) {
				lFile += "?" + new Date().getTime();
			} else if(this.addUrl != null) {
				lFile += this.addUrl;
			}
			this.atlasLoader.add(lSpec.file,lFile,null,$bind(this,this.onAtlasLoaded));
			++lI;
		}
	}
	,doAtlasLoad: function() {
		this.atlasLoader.load();
	}
	,onAtlasLoaded: function(pResource) {
		var lSpecs = this.lib.getAtlasWithFileName(pResource.name).textures;
		var lTexture = new PIXI.BaseTexture(pResource.data);
		var _g = 0;
		while(_g < lSpecs.length) {
			var iSpec = lSpecs[_g];
			++_g;
			var key = iSpec.symbol;
			var _this = this.lib.symbols;
			(js_Boot.__cast(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key] , flump_library_SpriteSymbol)).texture = new PIXI.Texture(lTexture,new PIXI.Rectangle(iSpec.rect[0],iSpec.rect[1],iSpec.rect[2],iSpec.rect[3]));
		}
	}
	,onAtlasLoadComplete: function(pLoader) {
		this.afterJSonCallback();
		this.clear();
	}
	,onError: function() {
		console.log("ERROR : Parser::onError");
		console.log(this.jsonResource);
	}
	,onAtlasError: function() {
		console.log("ERROR : Parser::onAtlasError : reload");
		this.atlasLoader.reset();
		this.buildAtlasLoadQ(true);
		haxe_Timer.delay($bind(this,this.doAtlasLoad),this.RELOAD_DELAY);
	}
	,clear: function() {
		this.addUrl = null;
		this.jsonResource = null;
		this.afterJSonCallback = null;
		this.atlasLoader.removeAllListeners();
		this.atlasLoader = null;
		this.lib = null;
		this.textures = null;
	}
	,__class__: flump_pixi_Parser
};
var flump_pixi_Sprite = function(pSymbolId,pResourceId) {
	var lSymbol;
	if(pResourceId != null) {
		var _this = flump_library_FlumpLibrary.libraries;
		var _this1 = (__map_reserved[pResourceId] != null ? _this.getReserved(pResourceId) : _this.h[pResourceId]).symbols;
		if(__map_reserved[pSymbolId] != null) {
			lSymbol = _this1.getReserved(pSymbolId);
		} else {
			lSymbol = _this1.h[pSymbolId];
		}
	} else {
		lSymbol = flump_library_FlumpLibrary.findLibraySymbolFromId(pSymbolId);
	}
	if(lSymbol == null) {
		throw new js__$Boot_HaxeError("Flump sprite does not exist: " + pSymbolId + " : " + pResourceId);
	}
	if(!js_Boot.__instanceof(lSymbol,flump_library_SpriteSymbol)) {
		throw new js__$Boot_HaxeError("Wrong symbol type for Flump sprite : " + pSymbolId + " : " + pResourceId);
	}
	PIXI.Sprite.call(this,(js_Boot.__cast(lSymbol , flump_library_SpriteSymbol)).texture);
	this.symbol = lSymbol;
	var tmp = (js_Boot.__cast(this.symbol , flump_library_SpriteSymbol)).get_origin()[0];
	this.anchor.x = tmp / this.texture.width;
	var tmp1 = (js_Boot.__cast(this.symbol , flump_library_SpriteSymbol)).get_origin()[1];
	this.anchor.y = tmp1 / this.texture.height;
};
flump_pixi_Sprite.__name__ = true;
flump_pixi_Sprite.__interfaces__ = [flump_pixi_ISymbol];
flump_pixi_Sprite.__super__ = PIXI.Sprite;
flump_pixi_Sprite.prototype = $extend(PIXI.Sprite.prototype,{
	destroy: function(options) {
		this.symbol = null;
		PIXI.Sprite.prototype.destroy.call(this);
	}
	,__class__: flump_pixi_Sprite
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
pixi_plugins_app_Application.AUTO = "auto";
pixi_plugins_app_Application.RECOMMENDED = "recommended";
pixi_plugins_app_Application.CANVAS = "canvas";
pixi_plugins_app_Application.WEBGL = "webgl";
pixi_plugins_app_Application.POSITION_STATIC = "static";
pixi_plugins_app_Application.POSITION_ABSOLUTE = "absolute";
pixi_plugins_app_Application.POSITION_FIXED = "fixed";
pixi_plugins_app_Application.POSITION_RELATIVE = "relative";
pixi_plugins_app_Application.POSITION_INITIAL = "initial";
pixi_plugins_app_Application.POSITION_INHERIT = "inherit";
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.TOP_LEFT = "TL";
Perf.TOP_RIGHT = "TR";
Perf.BOTTOM_LEFT = "BL";
Perf.BOTTOM_RIGHT = "BR";
Perf.DELAY_TIME = 4000;
flump_library_FlumpLibrary.libraries = new haxe_ds_StringMap();
flump_library_Keyframe.ZERO = [0.0,0.0];
flump_library_Keyframe.UNITY = [1.0,1.0];
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
